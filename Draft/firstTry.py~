# This file was *autogenerated* from the file /home/gaspard/Desktop/EA/EA-2/Draft/firstTry.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_10 = Integer(10)#e=10
#q=2^e # q=1024
#n=1000
#k=700
#t=38


e=_sage_const_5 
q=_sage_const_2 **e # q=1024
n=_sage_const_10 
k=_sage_const_4 
t=_sage_const_2 


F = GF(q, modulus='minimal_weight', names=('a',)); (a,) = F._first_ngens(1)


def randelt():
    return F.random_element()

def nonzerorandelt():
    res = F.random_element()
    while res ==_sage_const_0 :
        res = F.random_element()
    return res


FVectors = MatrixSpace(F, k)
FMatrixkn = MatrixSpace(F, k, n)
FMatrixkk = MatrixSpace(F, k, k)

y = [ nonzerorandelt() for i in range(n) ]

alpha = []
for i in range(n):
    aux = randelt()
    while aux in alpha:
        aux = randelt()
    alpha.append(aux)


G = FMatrixkn()
for i in range(k):
    for j in range(n):
        G[i,j] = y[j] * ( alpha[j] **  i)


H = FMatrixkk()
# Fill H here ...

for i in range(k):
    for j in range(k):
        if i == j:
            H[i,j] = nonzerorandelt()
        else:
            H[i,j] = _sage_const_0 

# Here, H is only a diagonal random matrix
# -> guarantees it is invertible
#Â -> fast to generate, to invert and to multiply



# The public key:
M=H*G

Me = M.echelon_form()

# Try here to reconstruct the alpha vector



Mp = M[_sage_const_0 :k,_sage_const_0 :k+_sage_const_1 ]
Mpp= M[_sage_const_0 :k,_sage_const_0 :k]

