#e=10
#q=2^e # q=1024
#n=1000
#k=700
#t=38


e=5
q=2^e # q=1024
n=30
k=10
t=5



F.<a> = GF(q, modulus='minimal_weight')


def randelt():
    return F.random_element()

def nonzerorandelt():
    res = F.random_element()
    while res ==0:
        res = F.random_element()
    return res


FVectors = MatrixSpace(F, k)
FMatrixkn = MatrixSpace(F, k, n)
FMatrixkk = MatrixSpace(F, k, k)

y = [ nonzerorandelt() for i in range(n) ]

alpha = []
for i in range(n):
    aux = randelt()
    while aux in alpha:
        aux = randelt()
    alpha.append(aux)


G = FMatrixkn()
for i in range(k):
    for j in range(n):
        G[i,j] = y[j] * ( alpha[j] ^  i)


H = FMatrixkk()
# Fill H here ...

for i in range(k):
    for j in range(k):
        if i == j:
            H[i,j] = nonzerorandelt()
        else:
            H[i,j] = 0

# Here, H is only a diagonal random matrix
# -> guarantees it is invertible
#Â -> fast to generate, to invert and to multiply



# The public key:
M=H*G

Me = M.echelon_form()

# Try here to reconstruct the alpha vector



Mp = M[0:k,0:k+1]
Mpp= M[0:k,0:k]

